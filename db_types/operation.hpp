/*
 * Here is Operation class used to interract with database
 * This file will be used by odb compiler to generate files that will work with database
 */
#ifndef OPERATION_HPP
#define OPERATION_HPP
#include <string>
#include <memory>
#include <odb/core.hxx>
#include <odb/tr1/memory.hxx>

class Debtor;
#include "debtor.hpp"

/**
 * @addtogroup database_api
 * @{
 */

#pragma db object table("Operations") pointer(std::shared_ptr) session
/**
 * @brief This class used to interract with database. Related to "Operations" table.
 * @details ODB compiler will generate operation-odb.cxx .hxx .ixx files using this one.
 * @see Debtor
 */
class Operation
{
  using str_c = const std::__cxx11::basic_string<char>;
public:

  ///@brief Construct a new Operation object
  Operation () { }

  /**
   * @brief Construct a new Operation object
   * @details Time field will automaticly be filled with current time using time(nullptr)
   * if valueChange = 0, database will reject with error this operation object.
   * @param[in] d Pointer obtained using database api.
   * @param[in] valueChange Value shows how debt has been changed. Can be negative.
   * @param[in] description Description of operation. Empty by default.
   */
  Operation (std::shared_ptr< Debtor > d, int valueChange, std::string description = ""); 

  /** 
   * @brief Getter for id field.
   * @return Copy of id field.
   * @details There is no setter for this field for obvious reasons.
   * @note This only makes sense if object was obtained using database api.
  */
  inline unsigned long id() const { return id_; }

  /**
   * @brief Getter to the Debtor attached with this operation.
   * @return Debtor from "Debtors" table.
   */
  std::shared_ptr<Debtor> debtor() const { return debtor_; };

  /**
   * @brief Getter for the time when operation was perfomed.
   * @return time represented in long long int seconds since 00:00, Jan 1 1970 UTC
   */
  long long int getTime() const { return time_; }

  /**
   * @brief Getter for the valueChange field.
   * 
   * @return Value shows how debt has been changed. Can be negative.
   */
  inline int valueChange() const { return valueChange_; }
  inline const std::string &description() const { return description_; } 

private:

  friend class odb::access;

  #pragma db id auto
  /// @brief Id of object in table
  /// @details automaticly generated by database.
  unsigned long id_;

  #pragma db not_null column("DebtorID")
  /// @brief Debtor from "Debtors" table.
  std::shared_ptr<Debtor> debtor_;

  #pragma db not_null column("ValueChange")
  /// @brief Value shows how debt has been changed. Can be negative.
  int valueChange_;

  #pragma db auto not_null type("TIMESTAMP") column("Time") default("now()")
  /// @brief time represented in long long int seconds since 00:00, Jan 1 1970 UTC
  long long int time_;

  #pragma db column("Description")
  /// @brief Description of operation.
  std::string description_;
};
///@}

#endif